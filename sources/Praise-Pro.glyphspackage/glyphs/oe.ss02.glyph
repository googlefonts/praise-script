{
glyphname = oe.ss02;
kernLeft = _o;
kernRight = _e_ss02;
layers = (
{
background = {
shapes = (
{
closed = 1;
nodes = (
(427,-12,o),
(494,36,o),
(515,96,cs),
(517,103,o),
(518,110,o),
(518,116,cs),
(518,133,o),
(510,144,o),
(502,144,cs),
(497,144,o),
(492,140,o),
(490,131,c),
(470,71,o),
(441,45,o),
(410,32,cs),
(398,27,o),
(389,25,o),
(381,25,cs),
(361,25,o),
(353,40,o),
(353,65,cs),
(353,94,o),
(363,133,o),
(376,173,c),
(473,183,o),
(586,272,o),
(586,359,cs),
(586,416,o),
(522,430,o),
(470,430,cs),
(442,430,o),
(419,423,o),
(396,411,c),
(373,430,o),
(338,433,o),
(302,433,cs),
(251,433,o),
(204,411,o),
(164,376,cs),
(144,359,o),
(126,339,o),
(109,316,cs),
(76,271,o),
(51,220,o),
(39,169,cs),
(32,143,o),
(29,118,o),
(29,95,cs),
(29,15,o),
(81,-7,o),
(165,-7,cs),
(196,-7,o),
(227,5,o),
(255,28,c),
(274,3,o),
(306,-12,o),
(361,-12,cs)
);
},
{
closed = 1;
nodes = (
(141,20,o),
(139,25,o),
(139,34,cs),
(139,53,o),
(150,89,o),
(158,112,cs),
(170,148,o),
(196,210,o),
(205,230,cs),
(227,280,o),
(289,411,o),
(313,411,c),
(319,410,o),
(321,405,o),
(321,396,cs),
(321,378,o),
(310,346,o),
(301,322,cs),
(287,285,o),
(263,235,o),
(254,214,cs),
(233,167,o),
(166,20,o),
(146,20,cs)
);
},
{
closed = 1;
nodes = (
(392,219,o),
(398,233,o),
(403,245,cs),
(413,268,ls),
(432,308,o),
(456,357,o),
(479,382,cs),
(487,392,o),
(495,396,o),
(500,396,cs),
(508,396,o),
(512,389,o),
(512,376,cs),
(512,371,o),
(511,366,o),
(510,359,cs),
(494,290,o),
(445,226,o),
(386,202,c)
);
}
);
};
layerId = "C623C401-2266-4A98-B253-3D45160C29C7";
shapes = (
{
ref = o.ss02;
},
{
alignment = -1;
pos = (209,0);
ref = e.ss02;
}
);
userData = {
assembly = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHW[ ]	/* 1 value pushed */
0 
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
PUSHW[ ]	/* 1 value pushed */
23 
MDAP[1]	/* MoveDirectAbsPt */
ELSE[ ]	/* Else */
PUSHW[ ]	/* 2 values pushed */
23 11 
MIAP[0]	/* MoveIndirectAbsPt */
EIF[ ]	/* EndIf */
PUSHW[ ]	/* 1 value pushed */
0 
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
PUSHW[ ]	/* 1 value pushed */
29 
MDAP[1]	/* MoveDirectAbsPt */
ELSE[ ]	/* Else */
PUSHW[ ]	/* 2 values pushed */
29 11 
MIAP[0]	/* MoveIndirectAbsPt */
EIF[ ]	/* EndIf */
PUSHW[ ]	/* 4 values pushed */
39 3 42 4 
CALL[ ]	/* CallFunction */
PUSHW[ ]	/* 1 value pushed */
39 
SRP0[ ]	/* SetRefPoint0 */
PUSHW[ ]	/* 1 value pushed */
45 
MDRP[10000]	/* MoveDirectRelPt */
PUSHW[ ]	/* 1 value pushed */
45 
MDAP[1]	/* MoveDirectAbsPt */
PUSHW[ ]	/* 1 value pushed */
42 
SRP0[ ]	/* SetRefPoint0 */
PUSHW[ ]	/* 1 value pushed */
50 
MDRP[10000]	/* MoveDirectRelPt */
PUSHW[ ]	/* 1 value pushed */
29 
SRP0[ ]	/* SetRefPoint0 */
PUSHW[ ]	/* 2 values pushed */
62 3 
MIRP[10100]	/* MoveIndirectRelPt */
NPUSHW[ ]	/* 33 values pushed */
7 62 23 62 39 62 55 62 71 62 87 62 103 62 119 62 135 62 151 62 167 62 183 62 199 62 215 62 231 62 247 62 16 
DELTAP1[ ]	/* DeltaExceptionP1 */
NPUSHW[ ]	/* 33 values pushed */
7 62 23 62 39 62 55 62 71 62 87 62 103 62 119 62 135 62 151 62 167 62 183 62 199 62 215 62 231 62 247 62 16 
DELTAP2[ ]	/* DeltaExceptionP2 */
NPUSHW[ ]	/* 15 values pushed */
7 62 23 62 39 62 55 62 71 62 87 62 103 62 7 
DELTAP3[ ]	/* DeltaExceptionP3 */
NPUSHW[ ]	/* 5 values pushed */
118 62 134 62 2 
DELTAP3[ ]	/* DeltaExceptionP3 */
IUP[0]	/* InterpolateUntPts */
IUP[1]	/* InterpolateUntPts */";
};
width = 563;
}
);
metricLeft = o.ss02;
metricRight = e.ss02;
note = oe;
}
