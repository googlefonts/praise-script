{
color = 3;
glyphname = H.ss03;
kernLeft = _H_ss03;
kernRight = _H_ss03;
layers = (
{
anchors = (
{
name = bottom;
pos = (522,0);
},
{
name = center;
pos = (522,300);
},
{
name = top;
pos = (938,656);
},
{
name = topleft;
pos = (66,600);
}
);
layerId = "C623C401-2266-4A98-B253-3D45160C29C7";
shapes = (
{
closed = 1;
nodes = (
(889,158,o),
(969,339,o),
(1032,447,cs),
(1090,546,o),
(1149,622,o),
(1195,658,cs),
(1205,666,o),
(1208,671,o),
(1208,677,cs),
(1208,688,o),
(1198,700,o),
(1172,700,cs),
(1120,700,o),
(1060,662,o),
(977,557,cs),
(920,485,o),
(762,229,o),
(762,88,cs),
(762,15,o),
(804,-23,o),
(883,-23,cs),
(917,-23,o),
(961,-11,o),
(997,9,cs),
(1008,15,o),
(1013,23,o),
(1013,29,cs),
(1013,34,o),
(1009,38,o),
(1003,38,cs),
(999,38,o),
(994,36,o),
(983,30,cs),
(967,21,o),
(949,19,o),
(934,19,cs),
(906,19,o),
(889,39,o),
(889,70,cs)
);
},
{
closed = 1;
nodes = (
(668,465,o),
(564,245,o),
(433,104,cs),
(360,26,o),
(268,-22,o),
(195,-22,cs),
(136,-22,o),
(107,0,o),
(107,42,cs),
(107,104,o),
(176,155,o),
(264,189,cs),
(353,223,o),
(461,235,o),
(533,236,cs),
(700,237,o),
(610,236,o),
(912,236,cs),
(959,236,o),
(995,285,o),
(995,294,cs),
(995,298,o),
(993,300,o),
(988,300,cs),
(558,296,ls),
(449,295,o),
(337,273,o),
(249,238,cs),
(133,192,o),
(55,121,o),
(55,36,cs),
(55,-60,o),
(133,-92,o),
(214,-92,cs),
(317,-92,o),
(435,-42,o),
(529,40,cs),
(656,151,o),
(792,396,o),
(794,518,cs),
(796,634,o),
(704,677,o),
(578,677,cs),
(492,677,o),
(392,655,o),
(318,621,cs),
(198,565,o),
(123,463,o),
(123,385,cs),
(123,326,o),
(172,302,o),
(225,301,cs),
(241,301,o),
(258,303,o),
(271,308,cs),
(281,312,o),
(284,317,o),
(284,321,cs),
(284,325,o),
(281,327,o),
(273,327,cs),
(223,327,o),
(206,342,o),
(206,385,cs),
(206,450,o),
(266,520,o),
(344,567,cs),
(419,611,o),
(504,639,o),
(564,639,cs),
(635,639,o),
(666,605,o),
(667,551,cs)
);
}
);
userData = {
assembly = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHW[ ]	/* 1 value pushed */
0 
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
PUSHW[ ]	/* 1 value pushed */
27 
MDAP[1]	/* MoveDirectAbsPt */
ELSE[ ]	/* Else */
PUSHW[ ]	/* 2 values pushed */
27 11 
MIAP[0]	/* MoveIndirectAbsPt */
EIF[ ]	/* EndIf */
PUSHW[ ]	/* 1 value pushed */
0 
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
PUSHW[ ]	/* 1 value pushed */
129 
MDAP[1]	/* MoveDirectAbsPt */
ELSE[ ]	/* Else */
PUSHW[ ]	/* 2 values pushed */
129 11 
MIAP[0]	/* MoveIndirectAbsPt */
EIF[ ]	/* EndIf */
PUSHW[ ]	/* 4 values pushed */
91 1 60 4 
CALL[ ]	/* CallFunction */
PUSHW[ ]	/* 4 values pushed */
52 6 117 4 
CALL[ ]	/* CallFunction */
PUSHW[ ]	/* 1 value pushed */
52 
SRP0[ ]	/* SetRefPoint0 */
PUSHW[ ]	/* 1 value pushed */
5 
MDRP[10000]	/* MoveDirectRelPt */
PUSHW[ ]	/* 1 value pushed */
5 
MDAP[1]	/* MoveDirectAbsPt */
PUSHW[ ]	/* 1 value pushed */
27 
SRP0[ ]	/* SetRefPoint0 */
PUSHW[ ]	/* 2 values pushed */
17 5 
MIRP[10100]	/* MoveIndirectRelPt */
NPUSHW[ ]	/* 33 values pushed */
7 17 23 17 39 17 55 17 71 17 87 17 103 17 119 17 135 17 151 17 167 17 183 17 199 17 215 17 231 17 247 17 16 
DELTAP1[ ]	/* DeltaExceptionP1 */
NPUSHW[ ]	/* 21 values pushed */
7 17 23 17 39 17 55 17 71 17 87 17 103 17 119 17 135 17 151 17 10 
DELTAP2[ ]	/* DeltaExceptionP2 */
NPUSHW[ ]	/* 5 values pushed */
166 17 182 17 2 
DELTAP2[ ]	/* DeltaExceptionP2 */
PUSHW[ ]	/* 1 value pushed */
117 
SRP0[ ]	/* SetRefPoint0 */
PUSHW[ ]	/* 1 value pushed */
32 
MDRP[10000]	/* MoveDirectRelPt */
PUSHW[ ]	/* 1 value pushed */
32 
MDAP[1]	/* MoveDirectAbsPt */
PUSHW[ ]	/* 1 value pushed */
117 
SRP0[ ]	/* SetRefPoint0 */
PUSHW[ ]	/* 1 value pushed */
35 
MDRP[10000]	/* MoveDirectRelPt */
PUSHW[ ]	/* 1 value pushed */
35 
MDAP[1]	/* MoveDirectAbsPt */
PUSHW[ ]	/* 1 value pushed */
52 
SRP0[ ]	/* SetRefPoint0 */
PUSHW[ ]	/* 1 value pushed */
99 
MDRP[10000]	/* MoveDirectRelPt */
PUSHW[ ]	/* 1 value pushed */
99 
MDAP[1]	/* MoveDirectAbsPt */
PUSHW[ ]	/* 1 value pushed */
52 
SRP0[ ]	/* SetRefPoint0 */
PUSHW[ ]	/* 1 value pushed */
102 
MDRP[10000]	/* MoveDirectRelPt */
PUSHW[ ]	/* 1 value pushed */
102 
MDAP[1]	/* MoveDirectAbsPt */
IUP[0]	/* InterpolateUntPts */
IUP[1]	/* InterpolateUntPts */";
};
width = 1022;
}
);
note = H;
}
